import importlib.util
import sys
from pathlib import Path

from milkman.singleton import SingletonMeta
from milkman.logger import logger

# This path is relative to CWD, not to the file. I expect this to only be called from app.py
p = Path("../exploits")
exploitsfiles = list(p.glob("**/[!_]*.py"))


class Exploits(list, metaclass=SingletonMeta):
    def __init__(self, *args, **kwargs):
        self.load_exploits()

    def load_exploits(self, *args, **kwargs):
        exploits = []
        for exp in exploitsfiles:
            name = exp.stem

            spec = importlib.util.spec_from_file_location(name, exp.resolve())
            module = importlib.util.module_from_spec(spec)
            sys.modules[name] = module
            spec.loader.exec_module(module)
            exploits.append(getattr(sys.modules[name], name))
        logger.debug(f"{exploits = }")

        # This may rarely cause bugs if some other process uses the list before we extend it with the new ones.
        self.clear()
        self.extend(exploits)


if __name__ == "__main__":
    # print(f"{exploitsfiles = }")
    exploits = Exploits()
    logger.debug(f"{exploits = }")
