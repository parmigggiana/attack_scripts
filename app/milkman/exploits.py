import sys
import importlib.util

from pathlib import Path

from milkman.logger import logger
from milkman.singleton import SingletonMeta

# This path is relative to CWD, not to the file. I expect this to only be called from app.py
p = Path("../exploits")


class Exploits(list, metaclass=SingletonMeta):
    def __init__(self, *args, **kwargs):
        self.load_exploits()

    def load_exploits(self, *args, **kwargs):
        exploitsfiles = list(p.glob("**/[!_]*.py"))
        exploits = []
        for exp in exploitsfiles:
            name = exp.stem

            spec = importlib.util.spec_from_file_location(name, exp.resolve())
            module = importlib.util.module_from_spec(spec)
            sys.modules[name] = module
            spec.loader.exec_module(module)
            exploitfun = getattr(sys.modules[name], "main")
            exploits.append(exploitfun)
            addlogger(name)
        logger.debug(f"{exploits = }")

        # This may rarely cause bugs if some other process uses the list before we extend it with the new ones.
        self.clear()
        self.extend(exploits)


def addlogger(name: str):
    logger.add(
        sink=f"../logs/exploits/{name}.log",
        format="<d>{time:HH:mm:ss.SS}</d> | <level>{level:^8}</level> | {message}",
        enqueue=True,
        filter=lambda record: record["extra"]["file"] == f"{name}.log",
        level="DEBUG",
        colorize=True,
    )


if __name__ == "__main__":
    # print(f"{exploitsfiles = }")
    exploits = Exploits()
    for ex in exploits:
        logger.info(f"{ex.__module__}")
    logger.info(f"{exploits = }")
